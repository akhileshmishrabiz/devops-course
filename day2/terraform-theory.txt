** Terraform **


WHY IAC?
Before IAC (Infra as code) people used to do the resource deployment manually. It had issues like
- Need manual intervention every time we need to deploy some resources
- Every time it takes the same amount of time to deploy the same set of resources.
- There are great chances of making configuration errors that could cause serious outages
- No way to easily create/destroy a set of resources for various environments such as testing, and staging.
- Hard to ensure security and compliance in large infrastructure

Then we got the idea of Having the infra defined as a code or configuration. It solved all above problems that we talked about.
- Same infra can easily be deployed and destroyed as many times as we need to
- No human intervention is required 
- Repeatable infra
- we can define the security policies for complete infra using the code
- It takes just few minutes/seconds to deploy the large infra
- infra can be versioned and shared across a team

## History of Terraform

https://medium.com/living-devops/what-is-infrastructure-as-code-and-how-terraform-became-synonyms-for-iac-fff2f3d9b935

What is Terraform?

Terraform is an open-source infrastructure as code (IaC) tool, developed by Hashicorp. Terraform uses declarative language, and HCL (Hashicorp Configuration Language)code to define its resources. 
You can also use JSON to define resources if you love to make things extra complicated for no reason.

It’s built in Golang (Go), which gives it much power to create different infrastructure pieces in parallel. It makes it reliable by taking advantage of Go’s strong type-checking and error-handling capabilities.

**Why Terraform?**

Terraform is Idempotent, meaning you can run the same code multiple times and it will give you the same result.

It’s repeatable, you can use the same configuration to provide infra for multiple environments(prod, dev, and staging).

It can be modularized. You can split your configuration into small, independent parts. It supports both, public and private modules.

Managing dependencies(explicit and implicit dependencies) is a cakewalk in Terraform.

Terraform is Cloud agnostic, meaning you can use the same configuration files to provision infra in multiple cloud platforms.
  That doesn’t mean the same line of code can be deployed in any cloud, of course, you need to write different code using specific providers.
  However, any cloud provider can use the same concepts and syntax.


** What is Terraform state? **
The Terraform state file is a JSON or binary file that tracks the resources created and managed by Terraform. It stores the following.

Resource Metadata — includes details about the resources managed by Terraform, such as the resource type, ID, name, and attributes.
Dependencies — keeps track of the dependencies between resources.
Input Variables — stores values of input variables used in the Terraform configuration.
Output — stores the value of any outputs defined in the Terraform configuration.
Terraform also supports remote state, an industry-standard method of storing state files. I will talk more about terraform state management in another blog.

At the time of writing terraform supports below remote state.

Terraform Cloud
Amazon S3
Azure Blob Storage
Google Cloud Storage
HashiCorp Consul
HTTP Backend

** How to use the If/Else statement in Terraform? **

https://medium.com/living-devops/if-else-statement-in-terraform-is-much-more-powerful-than-you-think-311a914f0f83

** How to use loops in Terraform? **

https://medium.com/living-devops/terraform-meta-arguments-you-cannot-live-without-count-and-for-each-c782c00a9f78

  
